// Generated by gencpp from file hector_mapping/HectorDebugInfo.msg
// DO NOT EDIT!


#ifndef HECTOR_MAPPING_MESSAGE_HECTORDEBUGINFO_H
#define HECTOR_MAPPING_MESSAGE_HECTORDEBUGINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hector_mapping/HectorIterData.h>

namespace hector_mapping
{
template <class ContainerAllocator>
struct HectorDebugInfo_
{
  typedef HectorDebugInfo_<ContainerAllocator> Type;

  HectorDebugInfo_()
    : iterData()  {
    }
  HectorDebugInfo_(const ContainerAllocator& _alloc)
    : iterData(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::hector_mapping::HectorIterData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hector_mapping::HectorIterData_<ContainerAllocator> >> _iterData_type;
  _iterData_type iterData;





  typedef boost::shared_ptr< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> const> ConstPtr;

}; // struct HectorDebugInfo_

typedef ::hector_mapping::HectorDebugInfo_<std::allocator<void> > HectorDebugInfo;

typedef boost::shared_ptr< ::hector_mapping::HectorDebugInfo > HectorDebugInfoPtr;
typedef boost::shared_ptr< ::hector_mapping::HectorDebugInfo const> HectorDebugInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hector_mapping::HectorDebugInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hector_mapping::HectorDebugInfo_<ContainerAllocator1> & lhs, const ::hector_mapping::HectorDebugInfo_<ContainerAllocator2> & rhs)
{
  return lhs.iterData == rhs.iterData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hector_mapping::HectorDebugInfo_<ContainerAllocator1> & lhs, const ::hector_mapping::HectorDebugInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hector_mapping

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d33c0696c0c536f5c1447c260756674";
  }

  static const char* value(const ::hector_mapping::HectorDebugInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d33c0696c0c536fULL;
  static const uint64_t static_value2 = 0x5c1447c260756674ULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hector_mapping/HectorDebugInfo";
  }

  static const char* value(const ::hector_mapping::HectorDebugInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "HectorIterData[] iterData\n"
"================================================================================\n"
"MSG: hector_mapping/HectorIterData\n"
"float64[9] hessian\n"
"float64 conditionNum\n"
"float64 determinant\n"
"float64 conditionNum2d\n"
"float64 determinant2d\n"
;
  }

  static const char* value(const ::hector_mapping::HectorDebugInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.iterData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HectorDebugInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_mapping::HectorDebugInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hector_mapping::HectorDebugInfo_<ContainerAllocator>& v)
  {
    s << indent << "iterData[]" << std::endl;
    for (size_t i = 0; i < v.iterData.size(); ++i)
    {
      s << indent << "  iterData[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hector_mapping::HectorIterData_<ContainerAllocator> >::stream(s, indent + "    ", v.iterData[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HECTOR_MAPPING_MESSAGE_HECTORDEBUGINFO_H
